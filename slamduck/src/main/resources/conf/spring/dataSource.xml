<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:tx="http://www.springframework.org/schema/tx"

       xsi:schemaLocation="http://www.springframework.org/schema/beans  
       		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <description>数据库访问配置文件</description>


    <!-- 数据源配置 -->
    <!-- <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="${jdbc.pool.initialSize}"/>
        <property name="maxIdle" value="3" />
        <property name="maxTotal" value="${jdbc.pool.maxTotal}"/>
        以下设置解决connection reset问题
        <property name="testOnBorrow" value="true" />
        <property name="testWhileIdle" value="true" />
        <property name="validationQuery" value="${jdbc.validationQuery}" />
    </bean> -->
    <!-- 数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="${jdbc.pool.initialSize}"/>
        <property name="maxActive" value="${jdbc.pool.maxTotal}"/>
        <!-- 以下设置解决connection reset问题 -->
        <property name="testOnBorrow" value="true" />
        <property name="testWhileIdle" value="true" />
        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <property name="filters" value="wall,stat" />
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- config.mybatis 主配置文件  -->
        <property name="configLocation" value="classpath:conf/mybatis/configuration.xml" />
        <!-- config.mybatis SQL语句映射文件  -->
        <property name="mapperLocations">
            <list>
                <value>classpath*:com/missingvia/slamduck/**/bean/*.xml</value>
            </list>
        </property>
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<property name="basePackage" value="com.missingvia.slamduck.**.dao" />
		<property name="annotationClass" value="com.missingvia.slamduck.common.mybatis.MyBatisRepository"/>
	</bean>
    <!-- <bean id="pagination" class="com.ipowertec.framework.dao.mybatis.pagination.PageMybatis">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
        <property name="pageConfig" ref="pageConfig"/>
    </bean> -->
    <!-- 事务管理，@Transactional -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>


    <!-- 使用annotation定义数据库事务，这样可以在类或方法中直接使用@Transactional注解来声明事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


</beans>